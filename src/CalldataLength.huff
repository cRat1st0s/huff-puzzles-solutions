
/**
 *  CALLDATA_LENGTH HUFF EXERCISE
 *
 *
 *  When a user sends a transaction to a smart contract, they can include additional data, known as calldata, which the smart contract can use to execute its logic.
 *
 *  The task is to write within the `MAIN` macro below, huff code to get and return the length of this calldata, 
*/

#define macro MAIN() = takes(0) returns(0) {
    calldatasize    //      stack output:    size: byte size of the calldata.
                    //      description:     Get size of input data in current environment
                    //  [size]
    returndatasize  //      stack output:    size: byte size of the return data from the last executed sub context.
                    //      description:     Get size of output data from the previous call from the current environment
                    //  [0, size]
    mstore          //      stack input:    offset: offset in the memory in bytes.
                    //                      value: 32-byte value to write in the memory
                    //      description:    Save word to memory
                    //  []
    0x20            //  [0x20]
    returndatasize  //  [0, 0x20]
    return          //      stack input:    offset: byte offset in the memory in bytes, to copy what will be the return data of this context.
                    //                      size: byte size to copy (size of the return data)
                    //      description:    Halt execution returning output data
                    //  []
}

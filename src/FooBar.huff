
/** 
 *  FOO_BAR HUFF EXERCISE
 *
 *  Majority of ethereum contracts hold logic divide this logic into functions which users can specify and call to execute a particular logic without clashing into the other
 *  
 *  The task is to write within the `MAIN` macro below, huff code that mimics 2 solidity functions. 
 *      - One named `foo()` that simply returns 2,
 *      - the second named `bar()` that simply returns 3.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function foo() payable returns(uint256)
 #define function bar() payable returns(uint256)

#define macro FOO() = takes (0) returns (0) {
    0x2             //      stack output:    value: pushed value, aligned to the right (put in the lowest significant bytes).
                    //      description:     Place 1 byte item on stack
                    //  [0x2]
    returndatasize  //      stack output:    size: byte size of the return data from the last executed sub context.
                    //      description:     Get size of output data from the previous call from the current environment
                    //  [0, 0x2]
    mstore          //      stack input:    offset: offset in the memory in bytes.
                    //                      value: 32-byte value to write in the memory
                    //      description:    Save word to memory
                    //  []
    0x20            //  [0x20]
    returndatasize  //  [0, 0x20]
    return          //      stack input:    offset: byte offset in the memory in bytes, to copy what will be the return data of this context.
                    //                      size: byte size to copy (size of the return data)
                    //      description:    Halt execution returning output data
                    //  []
}
#define macro BAR() = takes (0) returns (0) {
    0x3             //      stack output:    value: pushed value, aligned to the right (put in the lowest significant bytes).
                    //      description:     Place 1 byte item on stack
                    //  [0x3]
    returndatasize  //      stack output:    size: byte size of the return data from the last executed sub context.
                    //      description:     Get size of output data from the previous call from the current environment
                    //  [0, 0x3]
    mstore          //      stack input:    offset: offset in the memory in bytes.
                    //                      value: 32-byte value to write in the memory
                    //      description:    Save word to memory
                    //  []
    0x20            //  [0x20]
    returndatasize  //  [0, 0x20]
    return          //      stack input:    offset: byte offset in the memory in bytes, to copy what will be the return data of this context.
                    //                      size: byte size to copy (size of the return data)
                    //      description:    Halt execution returning output data
                    //  []
}

#define macro MAIN() = takes(0) returns(0) {
    returndatasize  //      stack output:    size: byte size of the return data from the last executed sub context.
                    //      description:     Get size of output data from the previous call from the current environment
                    //  [0x0]
    calldataload    //      stack input:     i: byte offset in the calldata.
                    //      stack output:    data[i]: 32-byte value starting from the given offset of the calldata. All bytes after the end of the calldata are set to 0.
                    //      description:     Get input data of current environment
                    //  [uint256_arg]
    0xE0            //      stack output:    value: pushed value, aligned to the right (put in the lowest significant bytes).
                    //      description:     Place 1 byte item on stack
                    //  [calldataload_0x20, 0xE0]
    shr             //      stack input:     shift: number of bits to shift to the right.
                    //                       value: 32 bytes to shift.
                    //      stack output:    value >> shift: the shifted value. If shift is bigger than 255, returns 0.
                    //      description:     Logical right shift operation
                    //  [func_sig]
    dup1            //      stack input:     value: value to duplicate.
                    //      stack output:    value: duplicated value.
                    //                       value: original value.
                    //      description:     Duplicate 1st stack item
                    //  [func_sig, func_sig]
    __FUNC_SIG(foo)
                    //      description:     At compile time, the invocation of __FUNC_SIG is substituted with PUSH4 function_selector, where function_selector is the 4 byte function selector of the passed function definition or string. If a string is passed, it must represent a valid function signature i.e. "test(address, uint256)"
                    //  [func_sig_foo, func_sig, func_sig]
    eq              //      stack input:     a: left side integer.
                    //                       b: right side integer.
                    //      stack output:    a == b: 1 if the left side is equal to the right side, 0 otherwise.
                    //      description:     Equality comparison
                    //  [0_or_1, func_sig]
    foo             //      description:     foo PC
                    //  [foo_jumpdest, 0_or_1, func_sig]
    jumpi           //      stack input:     counter: byte offset in the deployed code where execution will continue from. Must be a JUMPDEST instruction.
                    //                       b: the program counter will be altered with the new value only if this value is different from 0. Otherwise, the program counter is simply incremented and the next instruction will be executed.
                    //      description:     Conditionally alter the program counter
                    //  [func_sig]
    __FUNC_SIG(bar)
                    //      description:     At compile time, the invocation of __FUNC_SIG is substituted with PUSH4 function_selector, where function_selector is the 4 byte function selector of the passed function definition or string. If a string is passed, it must represent a valid function signature i.e. "test(address, uint256)"
                    //  [func_sig_bar, func_sig]
    eq              //      stack input:     a: left side integer.
                    //                       b: right side integer.
                    //      stack output:    a == b: 1 if the left side is equal to the right side, 0 otherwise.
                    //      description:     Equality comparison
                    //  [0_or_1]
    bar             //      description:     bar PC
                    //  [bar_jumpdest, 0_or_1]
    jumpi           //      stack input:     counter: byte offset in the deployed code where execution will continue from. Must be a JUMPDEST instruction.
                    //                       b: the program counter will be altered with the new value only if this value is different from 0. Otherwise, the program counter is simply incremented and the next instruction will be executed.
                    //      description:     Conditionally alter the program counter
                    //  []

    returndatasize  //      stack output:    size: byte size of the return data from the last executed sub context.
                    //      description:     Get size of output data from the previous call from the current environment
                    //  [0]
    returndatasize  //      stack output:    size: byte size of the return data from the last executed sub context.
                    //      description:     Get size of output data from the previous call from the current environment
                    //  [0, 0]
    revert          //      stack input:    offset: byte offset in the memory in bytes. The return data of the calling context.
                    //                      size: byte size to copy (size of the return data).
                    //      description:    Halt execution reverting state changes but returning data and remaining gas
                    //  []

    foo:
        FOO()

    bar:
        BAR()
}